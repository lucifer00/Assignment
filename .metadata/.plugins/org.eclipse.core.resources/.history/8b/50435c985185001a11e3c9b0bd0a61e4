package com.assignment.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.CacheManager;
import org.springframework.cache.Cache.ValueWrapper;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.assignment.dao.AddressDao;
import com.assignment.dao.EmployeeDao;
import com.assignment.entity.Address;
import com.assignment.entity.Employee;
import com.assignment.exception.IncorrectEmployeeIdException;
import com.assignment.exception.IncorrectEmployeeWithNameException;
import com.assignment.repository.EmployeeRepository;

import net.sf.ehcache.Cache;
import net.sf.ehcache.Ehcache;
import net.sf.ehcache.Element;

@Service
public class EmloyeeServiceImpl implements EmployeeService {
	@Autowired
	private EmployeeRepository employeeRepository;
	
	@Autowired
	private CacheManager cacheManager;
	@Override
	public EmployeeDao addNewEmployee(EmployeeDao employeeDao) {
		Employee employee = new DozerBeanMapper().map(employeeDao, Employee.class);
		Employee returnedOnSave = employeeRepository.save(employee);
		if (returnedOnSave != null) {
			cacheManager.getCache("first-level-cache").put(employeeDao.getEmpId(), employeeDao);
			cacheManager.getCache("second-level-cache").put(employeeDao.getEmpId(), employeeDao);
			return employeeDao;
		}
		return null;
	}

	@Override
	public EmployeeDao getEmployeeById(int id)throws IncorrectEmployeeIdException{
		ValueWrapper valueWrapper=cacheManager.getCache("first-level-cache").get(id);
		if(valueWrapper!=null) {
			return (EmployeeDao)valueWrapper.get();
			}
		else {
			EmployeeDao employeeDao=(EmployeeDao)cacheManager.getCache("second-level-cache").get(id).get();
			cacheManager.getCache("first-level-cache").put(id,employeeDao);
			if(employeeDao==null) {
				Employee employee=employeeRepository.getOne(id);
				if(employee==null)throw new IncorrectEmployeeIdException(""+id);
			}
			return employeeDao;
		}
	}

	@CachePut(value = "first-level-cache,second-level-cache", key = "#id")
	public EmployeeDao addNewAddress(int id, AddressDao address) {
		Employee employee = employeeRepository.getOne(id);
		Address newAddress = new DozerBeanMapper().map(address, Address.class);
		employee.getAddresses().add(newAddress);
		Employee savedEmployee = employeeRepository.save(employee);
		return new DozerBeanMapper().map(savedEmployee, EmployeeDao.class);
	}

	@Override
	public void addBulkEmployeeData(List<EmployeeDao> employees) {
		ExecutorService executorService = Executors.newSingleThreadExecutor();

		Runnable runnable = () -> {
			employees.forEach(t->{
				Employee employee=new DozerBeanMapper().map(t,Employee.class);
				employeeRepository.save(employee);
			});
		};
		executorService.submit(runnable);
		executorService.shutdown();
	}

	@Override
	public List<EmployeeDao> getAllEmployees() {
		List<Employee> allEmployees = employeeRepository.findAll();
		List<EmployeeDao> toRet = new ArrayList<>();
		allEmployees.forEach(t -> {
			EmployeeDao employeeDao = new DozerBeanMapper().map(t, EmployeeDao.class);
			toRet.add(employeeDao);
		});
		return toRet;
	}
	@Scheduled(fixedRate = 60000*2)
	@Override
	public void autoUpdateCache() {
		System.out.println("Cache getting updated");
		List<EmployeeDao> employeeList=getAllEmployees();
		employeeList.forEach(t->{
			cacheManager.getCache("second-level-cache").put(t.getEmpId(), t);
		});
	}
	@Override
	public EmployeeDao getByName(String ename)throws IncorrectEmployeeWithNameException {
		Cache firstLevelCache=(Cache) cacheManager.getCache("first-level-cache").getNativeCache();
		Cache secondLevelCache=(Cache) cacheManager.getCache("second-level-cache").getNativeCache();
		EmployeeDao toRet=null;
		Map<Object, Element> employeeMap=firstLevelCache.getAll(firstLevelCache.getKeys());
		toRet=checkIfNameExists(employeeMap, ename);
		if(toRet==null) {
			employeeMap=secondLevelCache.getAll(secondLevelCache.getKeys());
			toRet=checkIfNameExists(employeeMap, ename);
			if(toRet!=null)cacheManager.getCache("first-level-cache").put(toRet.getEmpId(), toRet);
			else {
				Employee employee=employeeRepository.findByEmpName(ename);
				if(employee==null)throw new IncorrectEmployeeWithNameException(ename);
				toRet=new DozerBeanMapper().map(employee, EmployeeDao.class);
				cacheManager.getCache("first-level-cache").put(toRet.getEmpId(), toRet);
				cacheManager.getCache("second-level-cache").put(toRet.getEmpId(), toRet);
			}
		}
		return toRet;
	}
	public EmployeeDao checkIfNameExists(Map<Object,Element> employeeMap,String ename) {
		for(Map.Entry<Object, Element> entry:employeeMap.entrySet()) {
			EmployeeDao employeeDao=(EmployeeDao)entry.getValue().getObjectValue();
			if(employeeDao.getEmpName().equalsIgnoreCase(ename)) {
				return employeeDao;
			}
		}
		return null;
	}
}
